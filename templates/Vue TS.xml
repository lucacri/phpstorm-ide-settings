<templateSet group="Vue TS">
  <template name="vwatch" value="@Watch('$varToWatch$')&#10;on$varCleaned$Change() {&#10;    $END$&#10;}" description="" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="varToWatch" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="varCleaned" expression="capitalize(underscoresToCamelCase(varToWatch))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
    </context>
  </template>
  <template name="mutation" value="const {mutate: sendMessage, onDone, onError} = useInviteMutation(&#10;&#9;{&#10;&#9;&#9;update: (cache, {data: {invite}}) =&gt; {&#10;&#10;&#9;&#9;&#9;const data = cache.readQuery({query: InviteDocument});&#10;&#9;&#9;&#9;data.messages.push(sendMessage);&#10;&#9;&#9;&#9;cache.writeQuery({query: InviteDocument, data});&#10;&#9;&#9;}&#10;&#9;});&#10;&#9;sendMessage({id: 123});&#10;&#10;onDone(() =&gt; {&#10;&#10;});&#10;onError((error) =&gt; {&#10;&#9;fillValidationErrorsOrToast(error, errors, &quot;Error creating your new studio. Please try again!&quot;, &quot;input.&quot;);&#10;})&#10;" description="Vue Apollo Mutation" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
      <option name="Vue" value="true" />
    </context>
  </template>
  <template name="mutationWithDelete" value="try {&#10;      const dataToSend: QL_Query_MutationVariables = {};&#10;      let res = await this.$apollo.mutate({&#10;                                      mutation:  Query_UpdateAutomation,&#10;                                      variables: dataToSend,&#10;                                      update:    (store, {data}) =&gt; {&#10;                                              const dataInCache = store.readQuery({&#10;                                                                                    query:     Query_Team_Pending_Invitations,&#10;                                                                                    variables: {&#10;                                                                                      team_id: this.current_team.id&#10;                                                                                    }&#10;                                                                                  });&#10;                                              dataInCache.team_pending_invitations = dataInCache.team_pending_invitations.filter(&#10;                                                  t =&gt; {&#10;                                                    return t.id != this.invitation.id;&#10;                                                  });&#10;&#10;                                              store.writeQuery({&#10;                                                                 query:     Query_Team_Pending_Invitations,&#10;                                                                 variables: {&#10;                                                                   team_id: this.current_team.id&#10;                                                                 },&#10;                                                                 data:      dataInCache&#10;                                                               });&#10;                                            }&#10;                                    });&#10;      this.$toast({&#10;                    type:         &quot;success&quot;,&#10;                    message:      &quot;The automation has been archived&quot;,&#10;                    linkRouteObj: null,&#10;                    linkText:     null&#10;                  });&#10;      this.close();&#10;    } catch (e) {&#10;      this.$toast({&#10;                    type:         &quot;error&quot;,&#10;                    message:      &quot;There was an error while archiving. Please try again&quot;,&#10;                    linkRouteObj: null,&#10;                    linkText:     null&#10;                  });&#10;    }" description="Vue Apollo Mutation" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
      <option name="Vue" value="true" />
    </context>
  </template>
  <template name="v3prop" value="$propName$: {&#10;  type: $type$,&#10;  required: $required$,&#10;  default: () =&gt; $default$$END$&#10; }," description="Vue prop" toReformat="true" toShortenFQNames="true">
    <variable name="propName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="Boolean" alwaysStopAt="true" />
    <variable name="required" expression="" defaultValue="false" alwaysStopAt="true" />
    <variable name="default" expression="" defaultValue="false" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3computed" value="const $computedName$ = computed(() =&gt; {&#10;    return $END$;&#10;});" description="Vue Computed" toReformat="true" toShortenFQNames="true">
    <variable name="computedName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3ref" value="const $ref$ = ref($value$);" description="Vue Ref" toReformat="true" toShortenFQNames="true">
    <variable name="ref" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3reactive" value="const $ref$ = reactive($value$);" description="Vue Reactive" toReformat="true" toShortenFQNames="true">
    <variable name="ref" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3setup" value="interface Props {&#10;  msg?: string&#10;  labels?: string[]&#10;}&#10;const props = withDefaults(defineProps&lt;Props&gt;(), {&#10;  msg: 'hello',&#10;  labels: () =&gt; ['one', 'two']&#10;})&#10;&#10;import { ref, useSlots, useAttrs  } from 'vue';&#10;&#10;const slots = useSlots();&#10;const attrs = useAttrs();&#10;&#10;const emit = defineEmits([]);" description="Vue Component Setup" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3propobj" value="$propName$: {&#10;  type: Object as PropType&lt;$type$&gt;,&#10;  required: $required$,&#10;  default: () =&gt; $default$$END$&#10; }," description="Vue prop object" toReformat="true" toShortenFQNames="true">
    <variable name="propName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="required" expression="" defaultValue="false" alwaysStopAt="true" />
    <variable name="default" expression="" defaultValue="false" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3compModel" value="const $ref$ = computed({&#10;                                 get: () =&gt; props.$ref$,&#10;                                 set: (val) =&gt; emit(&quot;update:$ref$&quot;, val)&#10;                               });" description="Vue Computed Model" toReformat="true" toShortenFQNames="true">
    <variable name="ref" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>