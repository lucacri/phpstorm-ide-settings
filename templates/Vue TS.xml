<templateSet group="Vue TS">
  <template name="vwatch" value="@Watch('$varToWatch$')&#10;on$varCleaned$Change() {&#10;    $END$&#10;}" description="" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="varToWatch" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="varCleaned" expression="capitalize(underscoresToCamelCase(varToWatch))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
    </context>
  </template>
  <template name="mutation" value="const {mutate: sendMessage, onDone, onError} = useInviteMutation(&#10;&#9;{&#10;&#9;&#9;update: (cache, {data: {invite}}) =&gt; {&#10;&#10;&#9;&#9;&#9;const data = cache.readQuery({query: InviteDocument});&#10;&#9;&#9;&#9;data.messages.push(sendMessage);&#10;&#9;&#9;&#9;cache.writeQuery({query: InviteDocument, data});&#10;&#9;&#9;}&#10;&#9;});&#10;&#9;sendMessage({id: 123});&#10;&#10;onDone(() =&gt; {&#10;&#10;});&#10;onError((error) =&gt; {&#10;&#9;fillValidationErrorsOrToast(error, errors, &quot;Error creating your new studio. Please try again!&quot;, &quot;input.&quot;);&#10;})&#10;" description="Vue Apollo Mutation" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
      <option name="Vue" value="true" />
    </context>
  </template>
  <template name="v3prop" value="$propName$: {&#10;  type: $type$,&#10;  required: $required$,&#10;  default: () =&gt; $default$$END$&#10; }," description="Vue prop" toReformat="true" toShortenFQNames="true">
    <variable name="propName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="Boolean" alwaysStopAt="true" />
    <variable name="required" expression="" defaultValue="false" alwaysStopAt="true" />
    <variable name="default" expression="" defaultValue="false" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3computed" value="const $computedName$ = computed(() =&gt; {&#10;    return $END$;&#10;});" description="Vue Computed" toReformat="true" toShortenFQNames="true">
    <variable name="computedName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3ref" value="const $ref$ = ref($value$);" description="Vue Ref" toReformat="true" toShortenFQNames="true">
    <variable name="ref" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3reactive" value="const $ref$ = reactive($value$);" description="Vue Reactive" toReformat="true" toShortenFQNames="true">
    <variable name="ref" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3setup" value="interface Props {&#10;  msg?: string&#10;  labels?: string[]&#10;}&#10;const props = withDefaults(defineProps&lt;Props&gt;(), {&#10;  msg: 'hello',&#10;  labels: () =&gt; ['one', 'two']&#10;})&#10;&#10;import { ref, useSlots, useAttrs  } from 'vue';&#10;&#10;const slots = useSlots();&#10;const attrs = useAttrs();&#10;&#10;const emit = defineEmits([]);" description="Vue Component Setup" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3propobj" value="$propName$: {&#10;  type: Object as PropType&lt;$type$&gt;,&#10;  required: $required$,&#10;  default: () =&gt; $default$$END$&#10; }," description="Vue prop object" toReformat="true" toShortenFQNames="true">
    <variable name="propName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="required" expression="" defaultValue="false" alwaysStopAt="true" />
    <variable name="default" expression="" defaultValue="false" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3compModel" value="const $ref$Model = computed({&#10;                                 get: () =&gt; props.$ref$,&#10;                                 set: (val) =&gt; emit(&quot;update:$ref$&quot;, val)&#10;                               });" description="Vue Computed Model" toReformat="true" toShortenFQNames="true">
    <variable name="ref" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3compModelWithErrors" value="const $ref$Model = computed({&#10;                                 get: () =&gt; props.$ref$,&#10;                                 set: (val) =&gt; {&#10;                                    emit(&quot;update:$ref$&quot;, val);&#10;                                    const err = new SparkFormErrors(props.errors.all());&#10;                                    err.forget(&quot;$ref$&quot;);&#10;                                    emit('update:errors', err);&#10;                                 }&#10;                               });" description="Vue Computed Model" toReformat="true" toShortenFQNames="true">
    <variable name="ref" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3mutation" value="const $mutation$ = useUpdateClientMutation({});&#10;&#10;$mutation$.onDone(() =&gt; {&#10;  sending.value = false;&#10;  $toast({&#10;           type:         &quot;success&quot;,&#10;           message:      $successmessage$,&#10;           linkRouteObj: null,&#10;           linkText:     null&#10;         });&#10;});&#10;&#10;$mutation$.onError(() =&gt; {&#10;  sending.value = false;&#10;  $toast({&#10;           type:         &quot;error&quot;,&#10;           message:      &quot;There was a problem with your request. Please try again&quot;,&#10;           linkRouteObj: null,&#10;           linkText:     null&#10;         });&#10;});&#10;&#10;const $method$ = () =&gt; {&#10;  sending.value = true;&#10;    $mutation$.mutate({&#10;                          id:                  client.value.id,&#10;                       &#10;                        });&#10;  }&#10;};" description="Vue Apollo Mutation" toReformat="true" toShortenFQNames="true">
    <variable name="mutation" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="successmessage" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
      <option name="Vue" value="true" />
    </context>
  </template>
  <template name="v3toRef" value="const $name$ = toRef(props, &quot;$ref$&quot;);" description="Vue toRef" toReformat="true" toShortenFQNames="true">
    <variable name="ref" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="name" expression="ref" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v3routes" value="const {routeList} = routesList();" description="Routes" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
      <option name="VUE_INSIDE_TAG" value="false" />
      <option name="VUE_TEMPLATE" value="false" />
      <option name="Vue" value="true" />
    </context>
  </template>
</templateSet>